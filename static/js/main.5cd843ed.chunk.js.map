{"version":3,"sources":["helpers/index.js","components/NavigationBar.js","components/SingleCharacter.js","components/Episodes.js","App.js","serviceWorker.js","index.js"],"names":["paginationButton","pageCount","setPage","currentPage","pageButtons","_loop","i","push","react_default","a","createElement","className","key","onClick","console","log","NavigationBar","react_router_dom","to","SingleCharacterQuery","gql","_templateObject","SingleCharacter","info","_useState","useState","_useState2","Object","slicedToArray","character","setCharacter","_useState3","_useState4","page","Fragment","type","value","placeholder","onChange","e","target","components_NavigationBar","react_apollo_esm","variables","query","_ref","loading","error","_ref$data","data","_ref$data$characters","characters","_ref$data$characters$","next","prev","pages","count","results","map","_ref2","name","id","image","species","status","gender","origin","src","alt","EpisodesQuery","Episodes_templateObject","Episodes","_ref$data$episodes","episodes","_ref$data$episodes$in","air_date","client","ApolloClient","uri","App","document","title","react_router","exact","path","component","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5cd843ed.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const paginationButton = (pageCount, setPage, currentPage) => {\n  const pageButtons = [];\n\n  for (let i = 1; i <= pageCount; i++) {\n    pageButtons.push(\n      <button\n        className={currentPage === i ? \"btn btn-info active\" : \"btn btn-info\"}\n        key={i}\n        onClick={() => setPage(i)}\n      >\n        {i}\n      </button>\n    );\n  }\n\n  console.log(pageButtons);\n  return pageButtons;\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst NavigationBar = () => {\n  return (\n    <nav className=\"navigation-bar\">\n      <ul>\n        <li className=\"button\">\n          <Link to=\"/\">Characters</Link>\n        </li>\n        <li className=\"button\">\n          <Link to=\"/episodes\">Episodes</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default NavigationBar;\n","import React, { useState } from \"react\";\nimport { Query } from \"react-apollo\";\nimport { gql } from \"apollo-boost\";\nimport \"../style/style.scss\";\nimport { paginationButton } from \"../helpers\";\n\nimport NavigationBar from \"./NavigationBar\";\n\nconst SingleCharacterQuery = gql`\n  query($character: String!, $page: Int!) {\n    characters(page: $page, filter: { name: $character }) {\n      info {\n        count\n        next\n        prev\n        pages\n      }\n      results {\n        name\n        id\n        image\n        species\n        type\n        status\n        gender\n        origin {\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst SingleCharacter = info => {\n  const [character, setCharacter] = useState(\"\");\n  const [page, setPage] = useState(1);\n  return (\n    <>\n      <header className=\"header\">\n        <h1>Rick & Morty Character Base</h1>\n        <input\n          type=\"text\"\n          value={character}\n          placeholder=\"Type character name\"\n          onChange={e => setCharacter(e.target.value)}\n        />\n      </header>\n      <NavigationBar />\n      <main>\n        <Query variables={{ page, character }} query={SingleCharacterQuery}>\n          {({\n            loading,\n            error,\n            data: {\n              characters: {\n                info: { next, prev, pages, count } = {},\n                results\n              } = {}\n            } = {}\n          }) => {\n            if (loading)\n              return (\n                <p className=\"button\">\n                  Loading <i className=\"fas fa-spinner fa-spin\" />{\" \"}\n                </p>\n              );\n            if (error)\n              return (\n                <p className=\"button\">\n                  Error <i className=\"fas fa-exclamation-triangle\" />\n                </p>\n              );\n\n            next = next ? next : pages;\n            prev = prev ? prev : 1;\n            return (\n              <>\n                <section className=\"count\">\n                  <div className=\"prev-next\">\n                    <button type=\"button\" onClick={() => setPage(prev)}>\n                      <i className=\"fas fa-chevron-left\" />\n                    </button>\n                  </div>\n                  <button>\n                    Total entries: {count} on {pages}{\" \"}\n                    {pages <= 1 ? \"page\" : \"pages\"}\n                  </button>\n                  <div className=\"prev-next\">\n                    <button type=\"button\" onClick={() => setPage(next)}>\n                      <i className=\"fas fa-chevron-right\" />\n                    </button>\n                  </div>\n                </section>\n\n                <section className=\"character-list\">\n                  {info.count > 0 && info.count}\n                  {results\n                    ? results.map(\n                        ({\n                          name,\n                          id,\n                          image,\n                          species,\n                          status,\n                          gender,\n                          type,\n                          origin\n                        }) => (\n                          <article className=\"character-details\" key={id}>\n                            <h3>\n                              {name}\n                              <span className=\"subtitle\">\n                                {\" \"}\n                                {species}\n                                {type !== \"\" ? \", \" : \"\"}\n                                {type} from <br />{\" \"}\n                                {origin.name === \"unknown\"\n                                  ? \"unknown location\"\n                                  : origin.name}\n                              </span>\n                            </h3>\n                            <img\n                              src={image}\n                              alt={name}\n                              className=\"character-image\"\n                            />\n                            <div className=\"detail-icons\">\n                              <div className=\"detail-icon-box\">\n                                {status === \"Alive\" ? (\n                                  <i className=\"far fa-grin-beam\" />\n                                ) : status === \"Dead\" ? (\n                                  <i className=\"far fa-dizzy\" />\n                                ) : (\n                                  <i className=\"far fa-question-circle\" />\n                                )}\n                              </div>\n                              <div className=\"detail-icon-box\">\n                                {gender === \"Male\" ? (\n                                  <i className=\"fas fa-mars\" />\n                                ) : gender === \"Female\" ? (\n                                  <i className=\"fas fa-venus\" />\n                                ) : gender === \"Genderless\" ? (\n                                  <i className=\"fas fa-genderless\" />\n                                ) : (\n                                  <i className=\"fas fa-question\" />\n                                )}\n                              </div>\n                            </div>\n                          </article>\n                        )\n                      )\n                    : \"Nothing found\"}\n                </section>\n                <section className=\"pagination\">\n                  <div className=\"pagination-pages\">\n                    {paginationButton(pages, setPage, page)}\n                  </div>\n                </section>\n              </>\n            );\n          }}\n        </Query>\n      </main>\n    </>\n  );\n};\n\n// const paginationButtons = (pages, setPage, currentPage) => {\n//   const pageButtons = [];\n\n//   for (let i = 1; i <= pages; i++) {\n//     pageButtons.push(\n//       <button\n//         className={currentPage === i ? \"btn active\" : \"btn\"}\n//         key={i}\n//         onClick={() => setPage(i)}\n//       >\n//         {i}\n//       </button>\n//     );\n//   }\n//   return pageButtons;\n// };\n\nexport default SingleCharacter;\n","import React, { useState } from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { Query } from \"react-apollo\";\n\nimport NavigationBar from \"./NavigationBar\";\nimport { paginationButton } from \"../helpers/index\";\n\nconst EpisodesQuery = gql`\n  query($page: Int!) {\n    episodes(page: $page) {\n      info {\n        count\n        next\n        prev\n        pages\n      }\n      results {\n        id\n        name\n        air_date\n        episode\n      }\n    }\n  }\n`;\n\nfunction Episodes() {\n  const [page, setPage] = useState(1);\n  return (\n    <>\n      <header className=\"header\">\n        <h1>Rick & Morty Episodes Base</h1>\n      </header>\n      <NavigationBar />\n      <main>\n        <Query variables={{ page }} query={EpisodesQuery}>\n          {({\n            loading,\n            error,\n            data: {\n              episodes: {\n                info: { next, prev, pages, count } = {},\n                results\n              } = {}\n            } = {}\n          }) => {\n            if (loading)\n              return (\n                <p className=\"button\">\n                  Loading <i className=\"fas fa-spinner fa-spin\" />{\" \"}\n                </p>\n              );\n            if (error)\n              return (\n                <p className=\"button\">\n                  Error <i className=\"fas fa-exclamation-triangle\" />\n                </p>\n              );\n\n            next = next ? next : pages;\n            prev = prev ? prev : 1;\n\n            return (\n              <>\n                <main>\n                  <section className=\"count\">\n                    <div className=\"prev-next\">\n                      <button type=\"button\" onClick={() => setPage(prev)}>\n                        <i className=\"fas fa-chevron-left\" />\n                      </button>\n                    </div>\n                    <button>\n                      Total entries: {count} on {pages}{\" \"}\n                      {pages <= 1 ? \"page\" : \"pages\"}\n                    </button>\n                    <div className=\"prev-next\">\n                      <button type=\"button\" onClick={() => setPage(next)}>\n                        <i className=\"fas fa-chevron-right\" />\n                      </button>\n                    </div>\n                  </section>\n                  <table>\n                    <thead>\n                      <tr>\n                        <th>#</th>\n                        <th>Title</th>\n                        <th>Aired on</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {results\n                        ? results.map(({ id, name, air_date }) => (\n                            <tr key={id}>\n                              <td>{id}</td>\n                              <td>{name}</td>\n                              <td>{air_date}</td>\n                            </tr>\n                          ))\n                        : '<p className=\"button\">Nothing found</p>'}\n                    </tbody>\n                  </table>\n                  <section className=\"pagination\">\n                    <div className=\"pagination-pages\">\n                      {paginationButton(pages, setPage, page)}\n                    </div>\n                  </section>\n                </main>\n              </>\n            );\n          }}\n        </Query>\n      </main>\n    </>\n  );\n}\n\nexport default Episodes;\n","import React from \"react\";\n// import of Apollo stuff\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { Switch, Route } from \"react-router-dom\";\n\nimport SingleCharacter from \"./components/SingleCharacter\";\nimport Episodes from \"./components/Episodes\";\n// Apollo client\nconst client = new ApolloClient({\n  uri: \"https://rickandmortyapi.com/graphql/\"\n});\n\n// functional component\nclass App extends React.Component {\n  componentDidMount() {\n    document.title = \"Rick and Morty Characterbase\";\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <ApolloProvider client={client}>\n          <Switch>\n            <Route exact path=\"/\" component={SingleCharacter} />\n            <Route exact path=\"/episodes\" component={Episodes} />\n          </Switch>\n        </ApolloProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}